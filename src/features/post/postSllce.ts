import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import {
  fetchPosts as fetchPostsApi,
  addPost as addPostApi,
  fetchPost as fetchPostApi,
  updatePost,
} from './postApi';
import type { PostInterface } from './types';

export interface PostState {
  value: Array<PostInterface>;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: PostState = {
  value: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {
  const response = await fetchPostsApi();
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const fetchPost = createAsyncThunk(
  'posts/fetchPosts',
  async (id: number) => {
    const response = await fetchPostApi(id);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const addPost = createAsyncThunk('posts/addPost', async (post: any) => {
  const response = await addPostApi(post);
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const patchPost = createAsyncThunk(
  'posts/addPost',
  async (id: number, post: any) => {
    const response = await updatePost(id, post);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const postSlice = createSlice({
  name: 'posts',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPosts: (state, action: PayloadAction<Array<PostInterface>>) => {
      state.value = action.payload;
    },
    addPost: (state, action: PayloadAction<PostInterface>) => {
      state.value.push(action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPosts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchPosts.fulfilled, (state, action: any) => {
        state.status = 'idle';
        state.value = action.payload;
      })
      .addCase(fetchPosts.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const selectPosts = (state: RootState) => state.posts.value;
export const selectPost = (id: string | number) => (state: RootState) =>
  state.posts.value.find((val: PostInterface) => val.id == Number(id));

export const { setPosts, addPost: addPostData } = postSlice.actions;

export default postSlice.reducer;
